class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # 1. form clusters
        n = len(graph)
        dsu = UnionFind()
        for i in range(n):
            for j in range(i, n):
                if graph[i][j] == 1:
                    dsu.union(i, j)
        
        # 2. parent is the cluster identifier
        # for each cluster, count how many initial nodes belong in it
        cluster = defaultdict(int)
        for i in initial:
            parent = dsu.find(i)
            cluster[parent] += 1
        
        # question requirement: 
        # return such a node with the smallest index
        initial.sort()
        node = initial[0]

        # 3. check if the initial node only belongs to 1 cluster
        # if yes -> store the cluster size & maximize it 
        max_size = 0
        for i in initial:
            parent = dsu.find(i)
            if cluster[parent] == 1:
                if -dsu.parents[parent] > max_size:
                    max_size = -dsu.parents[parent]
                    node = i

        return node

class UnionFind:
    def __init__(self):
        self.parents = {}
    
    def find(self, node):
        if node in self.parents:
            # it's the parent
            if self.parents[node] < 0:
                return node
            # path compression
            self.parents[node] = self.find(self.parents[node])
            return self.parents[node]
        else:
            self.parents[node] = -1
            return node

    def union(self, node1, node2):
        p1, p2 = self.find(node1), self.find(node2)
        if p1 == p2:
            return 
        
        if self.parents[p1] <= self.parents[p2]:
            self.parents[p1] += self.parents[p2]
            self.parents[p2] = p1
        else:
            self.parents[p2] += self.parents[p1]
            self.parents[p1] = p2